[project]
name = "emcfile"
version = "0.1.0"
description = "Add your description here"
readme = "readme.md"
requires-python = ">=3.10"
dependencies = [
    "h5py>=3.11.0",
    "numpy>=1.20",
    "scipy>=1.12.0",
    "typing-extensions>=4.12.2",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "pre-commit>=2.20.0",
    "coverage>=5.0.3",
    "mypy>=0.991",
    "pytest>=7.2.0",
    "pytest-cov>=4.0.0",
    "pytest-html",
    "ruff>=0.0.235",
    "psutil",
    "pdoc3",
    "matplotlib",
]

[tool.pytest.ini_options]
log_cli = true
# False: no test names
log_cli_level = "INFO"
# log_cli_level = CRITICAL
# INFO: more information
required_plugins = ["pytest-html", "pytest-cov"]
# addopts = --cov --cov-report html --cov-report term

[tool.mypy]
exclude = ["^emcfile/tests/.*$", "^tutorial/.*$"]

[[tool.mypy.overrides]]
module = ["h5py", "scipy.*"]
ignore_missing_imports = true

[tool.coverage.run]
branch = true

[tool.coverage.report]
ignore_errors = true

exclude_lines =[
    "pragma: no cover",
    "raise NotImplementedError",
    "raise FileNotFoundError",
    "raise FileExistsError",
    "raise ValueError",
    "return NotImplemented",
]

omit = [
  "emcfile/tests/*",
  "tutorial/*"
]

[tool.coverage.html]
title = "emcfile Test Coverage Report"
directory = "docs/emcfile/htmlcov"


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py39"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
